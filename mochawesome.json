{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-02-01T01:40:27.908Z",
    "end": "2024-02-01T01:41:38.598Z",
    "duration": 70690
  },
  "results": [
    {
      "uuid": "da80808f-ab9b-47ec-b45f-abe32d681499",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c5c90b55-dc79-473a-a7af-14f1a34d83ae",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1036,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "4aad1ff4-5ba1-4216-a6a6-9afd706fa99a",
              "parentUUID": "c5c90b55-dc79-473a-a7af-14f1a34d83ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 998,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "b5edb21a-a17f-4d0b-861b-5f8eac6ef816",
              "parentUUID": "c5c90b55-dc79-473a-a7af-14f1a34d83ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 399,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "955754e0-2bf7-463d-ae86-a44be0118f1a",
              "parentUUID": "c5c90b55-dc79-473a-a7af-14f1a34d83ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5a0e2a94-c508-4aaf-a20d-cb1f57b6182e",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 572,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "0181c3e3-1e2f-4091-8dc6-2dcf2e08d29d",
                  "parentUUID": "5a0e2a94-c508-4aaf-a20d-cb1f57b6182e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 515,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "f4f21470-51f2-448f-856b-07a442a7545f",
                  "parentUUID": "5a0e2a94-c508-4aaf-a20d-cb1f57b6182e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 462,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "19c4430a-3bb5-47dd-866f-968ccbd0a551",
                  "parentUUID": "5a0e2a94-c508-4aaf-a20d-cb1f57b6182e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0181c3e3-1e2f-4091-8dc6-2dcf2e08d29d",
                "f4f21470-51f2-448f-856b-07a442a7545f",
                "19c4430a-3bb5-47dd-866f-968ccbd0a551"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1549,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "4aad1ff4-5ba1-4216-a6a6-9afd706fa99a",
            "b5edb21a-a17f-4d0b-861b-5f8eac6ef816",
            "955754e0-2bf7-463d-ae86-a44be0118f1a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2433,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1a0967cd-bf95-453b-86f5-9024f71d9b1f",
      "title": "",
      "fullFile": "cypress\\e2e\\Automation-test-store\\add-multiple-items-to-basket.js",
      "file": "cypress\\e2e\\Automation-test-store\\add-multiple-items-to-basket.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "52a0f4f2-3137-42b2-a2ab-c30275ec09dd",
          "title": "Add multiple items to basket",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add specific items to basket",
              "fullTitle": "Add multiple items to basket Add specific items to basket",
              "timedOut": null,
              "duration": 11332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Iterate through each of the data in the fixture/products file and passing them through the custom function\nglobalThis.data.productName.forEach(function (element) {\n  cy.addProductToBasket(element);\n});\n// Click to see the cart contents\ncy.get('.dropdown-toggle > .fa').click();",
              "err": {},
              "uuid": "fe239ac4-6916-4f43-85b6-2767f961d22e",
              "parentUUID": "52a0f4f2-3137-42b2-a2ab-c30275ec09dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe239ac4-6916-4f43-85b6-2767f961d22e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11332,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "661347fe-c863-4e7e-a387-d943cb23d3d6",
      "title": "",
      "fullFile": "cypress\\e2e\\Automation-test-store\\alias.invoke.js",
      "file": "cypress\\e2e\\Automation-test-store\\alias.invoke.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "95872eba-869e-4cbb-8977-6d299e1dda69",
          "title": "alisas.invoke",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate A SPECIFIC HAIR CAIR PRODUCT",
              "fullTitle": "alisas.invoke Validate A SPECIFIC HAIR CAIR PRODUCT",
              "timedOut": null,
              "duration": 7452,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"https://automationteststore.com/\");\ncy.get(\"a[href*='product/category&path=']\").contains(\"Hair Care\").click();\n// Gets the list of the products and then extracts(invokes the method to get the text) the text and stores it in the 'productThumbnail' Using Alias is a shorter way to write it then the beforeEach method. We do not need to keep getting and invoking the text and validating it\ncy.get('.fixed_wrapper .prdocutname').eq(0).invoke('text').as('productThumbnail');\ncy.get('@productThumbnail').its('length').should('be.gt', 18);\ncy.get('@productThumbnail').should('include', 'Seaweed Conditioner');",
              "err": {},
              "uuid": "016f53ad-064e-4905-a3a0-6a8c6e503ae9",
              "parentUUID": "95872eba-869e-4cbb-8977-6d299e1dda69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the number of products on the homepage",
              "fullTitle": "alisas.invoke Validate the number of products on the homepage",
              "timedOut": null,
              "duration": 1936,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"https://automationteststore.com/\");\ncy.get('.thumbnail ').as('thumbnails');\n// Grab the all of the thumbnails and within the thumbnails, find the price tags so that the prices can be iterated, and not the thumbnails.\n// cy.get('@thumbnails').find('.oneprice').each(($el, index, $list) => {\n//     cy.log($el.text());\n//     })\n// Get the regular prices from the thumbnails and invoke the text command to store the text in the itemPrice property\ncy.get('@thumbnails').find('.oneprice').invoke('text').as('itemPrice');\ncy.get('@thumbnails').find('.pricenew').invoke('text').as('saleItemPrice');\n// The price texts will be going into a for loop to check all of the prices\nvar itemsPrice = 0;\ncy.get('@itemPrice').then($linkText => {\n  // Need to get all of the normal prices first and add them to the itemTotalPrice variable \n  var itemTotalPrice = 0;\n  // Spliting allows us to remove the dollar sign and keep the rest of the numbers \n  var itemPrice = $linkText.split('$');\n  var i;\n  for (i = 0; i < itemPrice.length; i++) {\n    cy.log(itemPrice[i]);\n    // As it loops around, the texts are being converted to numbers and added to the itemTotalPrice variable\n    itemTotalPrice += Number(itemPrice[i]);\n  }\n  // The itemTotalPrice variable will then be added to the global variable which is itemsPrice\n  itemsPrice += itemTotalPrice;\n  cy.log('Total price of the non-sale items: ' + itemTotalPrice);\n});\n// Same process as above but this time with sale items \ncy.get('@saleItemPrice').then($linkText => {\n  var saleItemTotalPrice = 0;\n  var saleItemPrice = $linkText.split('$');\n  var i;\n  for (i = 0; i < saleItemPrice.length; i++) {\n    saleItemTotalPrice += Number(saleItemPrice[i]);\n    cy.log(saleItemPrice[i]);\n  }\n  // Add the sale items to the global variable \n  itemsPrice += saleItemTotalPrice;\n  cy.log('Total price of the sale items: ' + saleItemTotalPrice);\n}).then(() => {\n  // Log the prices for all of the normal and sale items \n  cy.log('Total price of the all products: ' + itemsPrice);\n  expect(itemsPrice).to.equal(itemsPrice);\n});",
              "err": {},
              "uuid": "c2824d50-a920-459c-8f2b-acf09e392520",
              "parentUUID": "95872eba-869e-4cbb-8977-6d299e1dda69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "016f53ad-064e-4905-a3a0-6a8c6e503ae9",
            "c2824d50-a920-459c-8f2b-acf09e392520"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f4b8fdfd-7a9d-4da1-ad3d-74b17a016434",
      "title": "",
      "fullFile": "cypress\\e2e\\selectors.js",
      "file": "cypress\\e2e\\selectors.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "82bf20a7-3ea4-4aca-a1e4-3d5ad39a2cc8",
          "title": "Selector examples",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Examples of Selectors via WebdriverUni Contact Us Page",
              "fullTitle": "Selector examples Examples of Selectors via WebdriverUni Contact Us Page",
              "timedOut": null,
              "duration": 2639,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"http://www.webdriveruniversity.com/Contact-Us/contactus.html\");\n//By tag name\ncy.get(\"input\");\n//By attribute name and value\ncy.get(\"input[name='first_name']\");\n//By id\ncy.get(\"#contact_me\");\n//By class\ncy.get(\".feedback-input\");\n//By multiple classes\ncy.get(\"[class='navbar navbar-inverse navbar-fixed-top']\");\n//By two different attributes\ncy.get(\"[name='email'][placeholder='Email Address']\");\n//By xpath\ncy.xpath(\"//input[@name='first_name']\");",
              "err": {},
              "uuid": "d4ee5030-46b9-4c11-89da-e499d71bafab",
              "parentUUID": "82bf20a7-3ea4-4aca-a1e4-3d5ad39a2cc8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4ee5030-46b9-4c11-89da-e499d71bafab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2639,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}